@page "/livros/alterar/{id:guid}"
@using TheosLivraria.Web.Request.Livros
@using TheosLivraria.Web.ServicesAPI
@inject ILivroService LivroService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<RadzenCard Style="max-width:500px;margin:auto;margin-top:32px;">
    <h3 style="text-align:center;">Alterar Livro</h3>
    @if (livro is null)
    {
        <RadzenAlert Severity="AlertSeverity.Info" Summary="Carregando..." />
    }
    else
    {
        <div style="margin-bottom:16px;">
            <RadzenTextBox @bind-Value="livro.Titulo" Name="Titulo" Placeholder="Título" Style="width:100%;" />
            @if (showValidation && string.IsNullOrWhiteSpace(livro.Titulo))
            {
                <RadzenAlert Severity="AlertSeverity.Error" Summary="Título obrigatório" />
            }
        </div>
        <div style="margin-bottom:16px;">
            <RadzenTextBox @bind-Value="livro.Autor" Name="Autor" Placeholder="Autor" Style="width:100%;" />
            @if (showValidation && string.IsNullOrWhiteSpace(livro.Autor))
            {
                <RadzenAlert Severity="AlertSeverity.Error" Summary="Autor obrigatório" />
            }
        </div>
        <div style="margin-bottom:16px;">
            <RadzenTextBox @bind-Value="livro.Isbn" Name="Isbn" Placeholder="ISBN" Style="width:100%;" />
            @if (showValidation && string.IsNullOrWhiteSpace(livro.Isbn))
            {
                <RadzenAlert Severity="AlertSeverity.Error" Summary="ISBN obrigatório" />
            }
        </div>
        <div style="margin-bottom:16px;">
            <RadzenNumeric @bind-Value="livro.Preco" Name="Preco" Placeholder="Preço" Style="width:100%;" />
            @if (showValidation && livro.Preco <= 0)
            {
                <RadzenAlert Severity="AlertSeverity.Error" Summary="Preço obrigatório" />
            }
        </div>
        <div style="margin-bottom:16px;">
            <RadzenNumeric @bind-Value="livro.Estoque" Name="Estoque" Placeholder="Estoque" Style="width:100%;" />
            @if (showValidation && livro.Estoque < 0)
            {
                <RadzenAlert Severity="AlertSeverity.Error" Summary="Estoque obrigatório" />
            }
        </div>
        <RadzenButton Text="Salvar" Style="width:100%;margin-top:8px;" Click="@AlterarLivro" />
        <RadzenButton Text="Cancelar" Style="width:100%;margin-top:8px;" ButtonStyle="ButtonStyle.Secondary" Click="@(() => NavigationManager.NavigateTo("/livros"))" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <RadzenAlert Severity="AlertSeverity.Error" Summary="Erro" Detail="@errorMessage" Style="margin-top:16px;" />
        }
        @if (sucesso)
        {
            <RadzenAlert Severity="AlertSeverity.Success" Summary="Sucesso" Detail="Livro alterado com sucesso!" Style="margin-top:16px;" />
        }
    }
</RadzenCard>

@code {
    [Parameter] public Guid id { get; set; }
    private AlterarLivroRequest? livro;
    private string? errorMessage;
    private bool sucesso = false;
    private bool showValidation = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("theosAuthToken");
            var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("https://localhost:7187");
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var livroService = Refit.RestService.For<ILivroService>(httpClient);
            var result = await livroService.ObterPorId(id);
            if (result.Success && result.Data is not null)
            {
                livro = new AlterarLivroRequest
                {   
                    Titulo = result.Data.Titulo,
                    Autor = result.Data.Autor,
                    Isbn = result.Data.Isbn,
                    Preco = result.Data.Preco,
                    Estoque = result.Data.Estoque
                };
            }
            else
                errorMessage = result.Message ?? "Livro não encontrado.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar livro: {ex.Message}";
        }
    }

    private async Task AlterarLivro()
    {
        errorMessage = null;
        sucesso = false;
        showValidation = true;

        if (livro is null ||
            string.IsNullOrWhiteSpace(livro.Titulo) ||
            string.IsNullOrWhiteSpace(livro.Autor) ||
            string.IsNullOrWhiteSpace(livro.Isbn) ||
            livro.Preco <= 0 ||
            livro.Estoque < 0)
        {
            return;
        }

        try
        {
            var token = await LocalStorage.GetItemAsync<string>("theosAuthToken");
            var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("https://localhost:7187");
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var livroService = Refit.RestService.For<ILivroService>(httpClient);
            var result = await livroService.Alterar(id.ToString(), livro);
            if (result.Success)
            {
                sucesso = true;
                NavigationManager.NavigateTo("/livros");
            }
            else
            {
                errorMessage = result.Message ?? "Erro ao alterar livro.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao alterar livro: {ex.Message}";
        }
    }
}